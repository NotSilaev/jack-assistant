import sys
sys.path.append("../") # src/

from handlers.forms.add_feedback_request_form import start_add_feedback_request_form

from exceptions import exceptions_catcher
from access import access_checker
from utils import respondEvent, getUUIDStringFromCallData

from database.tables.feedback_requests import (
    getFeedbackRequest, 
    setFeedbackRequestEmployeeUserID, 
    setFeedbackRequestCompleted
)
from database.tables.users import getUser
from database.tables.contact_methods import getContactMethod

from aiogram import Router, F
from aiogram.types import  CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder


router = Router(name=__name__)


@router.callback_query(F.data == "add_feedback_request")
@exceptions_catcher()
@access_checker(required_permissions=['add_feedback_request'])
async def add_feedback_request(event: CallbackQuery, state: FSMContext) -> None:
    await start_add_feedback_request_form(event, state)
    
    
@router.callback_query(F.data.startswith("take_feedback_request"))
@exceptions_catcher()
@access_checker(required_permissions=['take_feedback_request'])
async def take_feedback_request(event: CallbackQuery, state: FSMContext) -> None:
    feedback_request_id: str = getUUIDStringFromCallData(call_data=event.data)
    feedback_request: dict | None = getFeedbackRequest(feedback_request_id)

    if not feedback_request:
        return await respondEvent(event, text='*‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –Ω–µ –Ω–∞–π–¥–µ–Ω*', parse_mode="Markdown")

    if feedback_request['employee_user_id']:
        return await respondEvent(event, text='*‚ùå –ó–∞–ø—Ä–æ—Å —É–∂–µ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º*', parse_mode="Markdown")

    customer_user_id: int = feedback_request['customer_user_id']
    contact_method_id: int = feedback_request['contact_method_id']
    description: str = feedback_request['description']

    if not customer_user_id:
        return await respondEvent(event, text='*‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–≤–∏–≤—à–∏–π –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω*', parse_mode="Markdown")

    customer_phone: str = getUser(customer_user_id)['phone']

    employee_user_id: int = event.from_user.id
    setFeedbackRequestEmployeeUserID(
        feedback_request_id, 
        employee_user_id
    )

    contact_method_title: str = getContactMethod(contact_method_id)['title'].title()

    message_text = (
        "*üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø—Ä–∏–Ω—è—Ç*\n\n"
        + f"üì≤ –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: `{customer_phone}`\n"
        + f"üí≠ –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏: *{contact_method_title}*\n"
        + (f"üìù –û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞: *{description}*" if description else "")
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º", 
        callback_data=f"complete_feedback_request-{feedback_request_id}"
    )

    await respondEvent(
        event,
        text=message_text,
        parse_mode="Markdown",
        reply_markup=keyboard.as_markup()
    )


@router.callback_query(F.data.startswith("complete_feedback_request"))
@exceptions_catcher()
@access_checker(required_permissions=['take_feedback_request'])
async def complete_feedback_request(event: CallbackQuery, state: FSMContext) -> None:
    feedback_request_id: str = getUUIDStringFromCallData(call_data=event.data)
    feedback_request: dict | None = getFeedbackRequest(feedback_request_id)

    if not feedback_request:
        return await respondEvent(event, text='*‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –Ω–µ –Ω–∞–π–¥–µ–Ω*', parse_mode="Markdown")

    employee_user_id: int = event.from_user.id
    if feedback_request['employee_user_id'] != employee_user_id:
        return await respondEvent(event, text='*‚ùå –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º*', parse_mode="Markdown")

    setFeedbackRequestCompleted(feedback_request_id)

    await respondEvent(
        event,
        text="*‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π*",
        parse_mode="Markdown"
    )
